import { Children, ReactElement, useMemo } from 'react';
import flattenChildren from 'react-keyed-flatten-children';
import merge from 'ts-deepmerge';

import { InputTextAlign } from '../../types/input';
import { MakeResponsive } from '../../types/shared';
import { isChildSubcomponent } from '../../utils';
import { vFlex } from '../../utils/sxChunks';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { Divider } from '../Divider';
import { ExpandableMenuItem } from '../ExpandableMenuItem';
import { InputBar } from '../InputBar';
import { MenuItem } from '../MenuItem';
import { MenuItemSize } from '../MenuItem/shared';
import { Option } from '../Select';
import { SmartClone } from '../SmartClone';
import { DEFAULT_TEXT_INPUT_ALIGN } from '../TextInput';
import { verticalMenuSxProps } from './styles';

export type VerticalMenuProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<MenuItemSize>;
    emphasized?: boolean;
    textAlign?: InputTextAlign;
  };

export function VerticalMenu<RC extends ReactElement | undefined = undefined>({
  children,
  sx = {},
  size = 'xSmall',
  emphasized,
  textAlign = DEFAULT_TEXT_INPUT_ALIGN,
  className,
  ...props
}: VerticalMenuProps<RC>) {
  const flattenedChildren = useMemo(
    () => flattenChildren(children),
    [children],
  );
  return (
    <Box
      {...props}
      sx={merge(
        vFlex,
        verticalMenuSxProps,
        {
          ...(emphasized ? { boxShadow: 'base.shadow.500' } : {}),
        },
        sx,
      )}
      className={`${className ?? ''} VerticalMenu`}
    >
      {Children.map(flattenedChildren, child => {
        if (
          isChildSubcomponent(child, Option) ||
          isChildSubcomponent(child, MenuItem) ||
          isChildSubcomponent(child, InputBar) ||
          isChildSubcomponent(child, ExpandableMenuItem)
        ) {
          return (
            <SmartClone
              size={child.props.size ? child.props.size : size}
              textAlign={textAlign}
              sx={merge(
                {
                  '& .innerTextContainer': { alignItems: textAlign === 'left' },
                },
                child.props.sx || {},
              )}
            >
              {child}
            </SmartClone>
          );
        }
        if (isChildSubcomponent(child, Divider)) {
          return (
            <SmartClone
              size={child.props.size ? child.props.size : size}
              sx={{ my: 'base.spacing.x1' }}
            >
              {child}
            </SmartClone>
          );
        }

        return null;
      })}
    </Box>
  );
}

VerticalMenu.displayName = 'VerticalMenu';
VerticalMenu.Divider = Divider;
VerticalMenu.Item = MenuItem;
