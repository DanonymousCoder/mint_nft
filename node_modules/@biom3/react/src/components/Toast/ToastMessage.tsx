import { Children, ReactElement, useMemo } from 'react';
import flattenChildren from 'react-keyed-flatten-children';
import merge from 'ts-deepmerge';

import { BodyProps } from '../../types/text';
import { isChildSubcomponent } from '../../utils';
import { Icon } from '../Icon';
import { SmartClone } from '../SmartClone';
import { Body } from '../Text';

export type ToastMessageProps<RC extends ReactElement | undefined = undefined> =
  BodyProps<RC>;

export function ToastMessage<RC extends ReactElement | undefined = undefined>({
  size = 'medium',
  sx = {},
  children,
  ...props
}: ToastMessageProps<RC>) {
  const flattenedChildren = useMemo(
    () => flattenChildren(children),
    [children],
  );
  return (
    <Body
      {...props}
      sx={merge(
        {
          verticalAlign: 'middle',
          color: 'base.color.text.inverse.primary',
        },
        sx,
      )}
      size={size}
    >
      {Children.map(flattenedChildren, child => {
        if (isChildSubcomponent(child, Icon)) {
          return (
            <SmartClone
              sx={merge(
                {
                  fill: 'base.color.text.inverse.primary',
                  mr: 'base.spacing.x2',
                  w: '1em',
                },
                child.props.sx || {},
              )}
            >
              {child}
            </SmartClone>
          );
        }
        return child;
      })}
    </Body>
  );
}

ToastMessage.displayName = 'Toast.Message';
