import {
  Children,
  isValidElement,
  ReactElement,
  useMemo,
  useState,
} from 'react';
import flattenChildren from 'react-keyed-flatten-children';

import {
  DEFAULT_DRAWER_POSITION,
  DEFAULT_DRAWER_SIZE,
  WithDrawerDisriminatedProps,
} from '../../types/overlays';
import { ButtCon } from '../Clickable';
import { DEFAULT_BUTTON_SIZE } from '../Clickable/Buttons/styles';
import { Drawer } from '../Drawer';
import { SmartClone } from '../SmartClone';
import { VerticalMenu } from '../VerticalMenu';
import { OverflowDrawerMenuProps } from './types';

export function OverflowDrawerMenu({
  children,
  domRef,
  testId,
  icon = 'MoreVertical',
  size = DEFAULT_BUTTON_SIZE,
  variant = 'tertiary',
  onClick,
  drawerSize = DEFAULT_DRAWER_SIZE,
  showHeaderBar = true,
  headerBarTitle,
  showBgOverlay,
  outsideClicksClose = true,
  drawerPosition = DEFAULT_DRAWER_POSITION,
  ...buttConProps
}: OverflowDrawerMenuProps) {
  const [visible, setVisible] = useState(false);
  const typedProps = {
    headerBarTitle,
    showHeaderBar,
  } as WithDrawerDisriminatedProps;
  const flattenedChildren = useMemo(
    () => flattenChildren(children),
    [children],
  );
  return (
    <Drawer
      {...typedProps}
      visible={visible}
      onCloseDrawer={() => setVisible(false)}
      outsideClicksClose={outsideClicksClose}
      size={drawerSize}
      showBgOverlay={showBgOverlay}
      domRef={domRef}
      drawerPosition={drawerPosition}
      testId={testId}
    >
      <Drawer.Target>
        <ButtCon
          {...buttConProps}
          testId={testId}
          icon={icon}
          size={size}
          variant={variant}
          onClick={event => {
            event.preventDefault();
            event.stopPropagation();
            setVisible(!visible);
            onClick?.(event);
          }}
        />
      </Drawer.Target>
      <Drawer.Content
        // @NOTE: weird emotion/react css issue here, padding-bottom is
        // over-written by a `padding` definition inside of the
        // DrawerOverlay component, despite the object order being correct
        sx={{ padding: 'base.spacing.x4', paddingBottom: '0px' }}
      >
        <VerticalMenu
          testId={`${testId}__overflowDrawerMenu`}
          sx={{ maxHeight: '100%' }}
        >
          {Children.map(flattenedChildren, child => {
            const typedChild = child as ReactElement<{ onClick: any }>;
            const shouldCloneWithOnClick =
              isValidElement(typedChild) && Boolean(typedChild.props?.onClick);
            return shouldCloneWithOnClick ? (
              <SmartClone
                onClick={event => {
                  event.preventDefault();
                  event.stopPropagation();
                  setVisible(false);
                }}
              >
                {child}
              </SmartClone>
            ) : (
              child
            );
          })}
        </VerticalMenu>
      </Drawer.Content>
    </Drawer>
  );
}

OverflowDrawerMenu.displayName = 'OverflowDrawerMenu';
